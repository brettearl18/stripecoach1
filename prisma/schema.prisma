generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coach {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastLoginAt   DateTime?
  clients       Client[]
  stripeConnect StripeConnect?
  sentMessages  Message[]      @relation("CoachSentMessages")
  receivedMessages Message[]   @relation("CoachReceivedMessages")
}

model Client {
  id              String           @id @default(cuid())
  name            String
  email           String
  stripeCustomerId String          @unique
  coachId         String
  coach           Coach            @relation(fields: [coachId], references: [id])
  subscriptions   Subscription[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastLoginAt     DateTime?
  sentMessages    Message[]        @relation("ClientSentMessages")
  receivedMessages Message[]       @relation("ClientReceivedMessages")

  @@index([coachId])
}

model Message {
  id          String      @id @default(cuid())
  content     String
  senderId    String
  receiverId  String
  senderType  UserType
  receiverType UserType
  coachSender      Coach?  @relation("CoachSentMessages", fields: [senderId], references: [id], map: "Message_coachSender_fkey")
  coachReceiver    Coach?  @relation("CoachReceivedMessages", fields: [receiverId], references: [id], map: "Message_coachReceiver_fkey")
  clientSender     Client? @relation("ClientSentMessages", fields: [senderId], references: [id], map: "Message_clientSender_fkey")
  clientReceiver   Client? @relation("ClientReceivedMessages", fields: [receiverId], references: [id], map: "Message_clientReceiver_fkey")
  type        MessageType
  status      MessageStatus @default(SENT)
  metadata    Json?
  attachments Attachment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
  @@index([status])
  @@index([type])
  @@index([senderId, senderType])
  @@index([receiverId, receiverType])
  @@index([receiverId, status])
  @@index([receiverId, type])
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])
  type      AttachmentType
  url       String
  name      String
  size      Int
  createdAt DateTime @default(now())

  @@index([messageId])
}

model Subscription {
  id                String            @id @default(cuid())
  stripeSubscriptionId String         @unique
  clientId          String
  client            Client            @relation(fields: [clientId], references: [id])
  status            SubscriptionStatus
  planName          String
  amount            Float
  currency          String
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([clientId])
}

model StripeConnect {
  id            String   @id @default(cuid())
  coachId       String   @unique
  coach         Coach    @relation(fields: [coachId], references: [id])
  stripeAccountId String @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum UserType {
  COACH
  CLIENT
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

enum MessageType {
  TEXT
  AUDIO
  FILE
  CHECK_IN
  URGENT
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum AttachmentType {
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
} 