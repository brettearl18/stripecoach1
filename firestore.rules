rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOrgMember(orgId) {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/organizations/$(orgId)/coaches/$(request.auth.uid))
      );
    }

    function isOrgOwner(orgId) {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/organizations/$(orgId)).data.ownerId == request.auth.uid
      );
    }

    function hasOrgPermission(orgId, permission) {
      return isAuthenticated() && (
        isOrgOwner(orgId) ||
        get(/databases/$(database)/documents/organizations/$(orgId)/coaches/$(request.auth.uid)).data.permissions[permission] == true
      );
    }

    function isWithinPlanLimits(orgId) {
      let org = get(/databases/$(database)/documents/organizations/$(orgId));
      let plan = org.data.plan;
      let clientCount = getAggregateCount(/databases/$(database)/documents/organizations/$(orgId)/clients);
      let coachCount = getAggregateCount(/databases/$(database)/documents/organizations/$(orgId)/coaches);
      
      return (
        (plan == 'free' && clientCount < 5 && coachCount == 1) ||
        (plan == 'pro' && clientCount < 30 && coachCount == 1) ||
        plan == 'enterprise'
      );
    }

    // Organization rules
    match /organizations/{orgId} {
      allow read: if isOrgMember(orgId);
      allow create: if isAuthenticated();
      allow update: if isOrgOwner(orgId) || hasOrgPermission(orgId, 'manageSettings');
      allow delete: if isOrgOwner(orgId);

      // Coaches subcollection
      match /coaches/{coachId} {
        allow read: if isOrgMember(orgId);
        allow create: if isOrgOwner(orgId) || hasOrgPermission(orgId, 'manageCoaches');
        allow update: if isOrgOwner(orgId) || (
          hasOrgPermission(orgId, 'manageCoaches') &&
          coachId != request.auth.uid // Can't modify own permissions
        );
        allow delete: if isOrgOwner(orgId) && coachId != request.auth.uid; // Can't delete self
      }

      // Clients subcollection
      match /clients/{clientId} {
        allow read: if isOrgMember(orgId);
        allow create: if (isOrgOwner(orgId) || hasOrgPermission(orgId, 'manageClients')) && isWithinPlanLimits(orgId);
        allow update: if isOrgOwner(orgId) || hasOrgPermission(orgId, 'manageClients');
        allow delete: if isOrgOwner(orgId) || hasOrgPermission(orgId, 'manageClients');
      }

      // Check-in forms subcollection
      match /checkInForms/{formId} {
        allow read: if isOrgMember(orgId);
        allow write: if isOrgOwner(orgId) || hasOrgPermission(orgId, 'manageClients');
      }

      // Form submissions subcollection
      match /formSubmissions/{submissionId} {
        allow read: if isOrgMember(orgId);
        allow create: if isOrgMember(orgId);
        allow update, delete: if isOrgOwner(orgId) || hasOrgPermission(orgId, 'manageClients');
      }
    }

    // User profile rules
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Subscription rules
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && resource.data.organizationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizations;
      allow write: if false; // Only managed through admin SDK
    }

    // Audit log rules
    match /auditLogs/{logId} {
      allow read: if isAdmin() || resource.data.organizationId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.organizations;
      allow create: if isAuthenticated();
      allow update, delete: if false; // Audit logs should never be modified or deleted
    }
  }
}